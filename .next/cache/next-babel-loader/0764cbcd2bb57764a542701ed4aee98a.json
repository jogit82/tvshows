{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/hchong/Projects/React/line-selector/pages/index.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from '../components/MyLayout';\nimport Link from 'next/link';\nimport fetch from 'isomorphic-unfetch';\n\nconst Index = props => __jsx(Layout, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 6\n  },\n  __self: this\n}, __jsx(\"h1\", {\n  className: \"jsx-1279470240\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7\n  },\n  __self: this\n}, \"Batman TV Shows! Count: \", props.count), __jsx(\"ul\", {\n  className: \"jsx-1279470240\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8\n  },\n  __self: this\n}, props.shows.map(show => __jsx(\"li\", {\n  key: show.id,\n  className: \"jsx-1279470240\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10\n  },\n  __self: this\n}, __jsx(Link, {\n  href: \"/p/[id]\",\n  as: `/p/${show.id}`,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11\n  },\n  __self: this\n}, __jsx(\"a\", {\n  id: \"ultest\",\n  className: \"jsx-1279470240\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, show.name, __jsx(\"span\", {\n  className: \"jsx-1279470240\",\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12\n  },\n  __self: this\n}, \"HIIII\")))))), __jsx(_JSXStyle, {\n  id: \"1279470240\",\n  __self: this\n}, \"#ultest.jsx-1279470240 span.jsx-1279470240{color:yellow;}h1.jsx-1279470240,a.jsx-1279470240{font-family:'Arial';}ul.jsx-1279470240{padding:0;}li.jsx-1279470240{list-style:none;margin:5px 0;}a.jsx-1279470240{-webkit-text-decoration:none;text-decoration:none;color:blue;}a.jsx-1279470240:hover{opacity:0.6;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9tbnQvYy9Vc2Vycy9oY2hvbmcvUHJvamVjdHMvUmVhY3QvbGluZS1zZWxlY3Rvci9wYWdlcy9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFnQm9CLEFBRzhCLEFBSUcsQUFJVixBQUlNLEFBS0ssQUFLVCxVQWJaLEVBY0EsQ0F0QkEsR0FZYSxJQVJiLFNBU0EscUJBSVcsV0FDWCIsImZpbGUiOiIvbW50L2MvVXNlcnMvaGNob25nL1Byb2plY3RzL1JlYWN0L2xpbmUtc2VsZWN0b3IvcGFnZXMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTGF5b3V0IGZyb20gJy4uL2NvbXBvbmVudHMvTXlMYXlvdXQnO1xyXG5pbXBvcnQgTGluayBmcm9tICduZXh0L2xpbmsnO1xyXG5pbXBvcnQgZmV0Y2ggZnJvbSAnaXNvbW9ycGhpYy11bmZldGNoJztcclxuXHJcbmNvbnN0IEluZGV4ID0gcHJvcHMgPT4gKFxyXG4gICAgPExheW91dD5cclxuICAgICAgICA8aDE+QmF0bWFuIFRWIFNob3dzISBDb3VudDoge3Byb3BzLmNvdW50fTwvaDE+XHJcbiAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICB7cHJvcHMuc2hvd3MubWFwKHNob3cgPT4gKFxyXG4gICAgICAgICAgICAgICAgPGxpIGtleT17c2hvdy5pZH0+XHJcbiAgICAgICAgICAgICAgICAgICAgPExpbmsgaHJlZj1cIi9wL1tpZF1cIiBhcz17YC9wLyR7c2hvdy5pZH1gfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGEgaWQ9XCJ1bHRlc3RcIj57c2hvdy5uYW1lfTxzcGFuPkhJSUlJPC9zcGFuPjwvYT5cclxuICAgICAgICAgICAgICAgICAgICA8L0xpbms+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICApKX1cclxuICAgICAgICA8L3VsPlxyXG4gICAgICAgIDxzdHlsZSBqc3g+e2BcclxuICAgICAgICAgICAgI3VsdGVzdCBzcGFue1xyXG4gICAgICAgICAgICAgICAgY29sb3I6IHllbGxvdztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBoMSxcclxuICAgICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIGZvbnQtZmFtaWx5OiAnQXJpYWwnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bCB7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpIHtcclxuICAgICAgICAgICAgbGlzdC1zdHlsZTogbm9uZTtcclxuICAgICAgICAgICAgbWFyZ2luOiA1cHggMDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYSB7XHJcbiAgICAgICAgICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICAgICAgICAgICAgY29sb3I6IGJsdWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGE6aG92ZXIge1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICBgfTwvc3R5bGU+XHJcbiAgICA8L0xheW91dD5cclxuKTtcclxuXHJcbkluZGV4LmdldEluaXRpYWxQcm9wcyA9IGFzeW5jIGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgZmV0Y2goJ2h0dHBzOi8vYXBpLnR2bWF6ZS5jb20vc2VhcmNoL3Nob3dzP3E9YmF0bWFuJyk7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzLmpzb24oKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyhgU2hvdyBkYXRhIGZldGNoZWQuIENvdW50OiAke2RhdGEubGVuZ3RofWApO1xyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgY291bnQ6IGRhdGEubGVuZ3RoLFxyXG4gICAgICAgIHNob3dzOiBkYXRhLm1hcChlbnRyeSA9PiBlbnRyeS5zaG93KVxyXG4gICAgfTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZGV4OyJdfQ== */\\n/*@ sourceURL=/mnt/c/Users/hchong/Projects/React/line-selector/pages/index.js */\"));\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\n  const data = await res.json();\n  console.log(`Show data fetched. Count: ${data.length}`);\n  return {\n    count: data.length,\n    shows: data.map(entry => entry.show)\n  };\n};\n\nexport default Index;","map":{"version":3,"sources":["/mnt/c/Users/hchong/Projects/React/line-selector/pages/index.js"],"names":["Layout","Link","fetch","Index","props","count","shows","map","show","id","name","getInitialProps","res","data","json","console","log","length","entry"],"mappings":";;;;AAAA,OAAOA,MAAP,MAAmB,wBAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IACf,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAA6BA,KAAK,CAACC,KAAnC,CADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACKD,KAAK,CAACE,KAAN,CAAYC,GAAZ,CAAgBC,IAAI,IACjB;AAAI,EAAA,GAAG,EAAEA,IAAI,CAACC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,SAAX;AAAqB,EAAA,EAAE,EAAG,MAAKD,IAAI,CAACC,EAAG,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAG,EAAA,EAAE,EAAC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAgBD,IAAI,CAACE,IAArB,EAA0B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAA1B,CADJ,CADJ,CADH,CADL,CAFJ;AAAA;AAAA;AAAA,m1FADJ;;AA0CAP,KAAK,CAACQ,eAAN,GAAwB,kBAAiB;AACrC,QAAMC,GAAG,GAAG,MAAMV,KAAK,CAAC,8CAAD,CAAvB;AACA,QAAMW,IAAI,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAnB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,6BAA4BH,IAAI,CAACI,MAAO,EAArD;AAEA,SAAO;AACHZ,IAAAA,KAAK,EAAEQ,IAAI,CAACI,MADT;AAEHX,IAAAA,KAAK,EAAEO,IAAI,CAACN,GAAL,CAASW,KAAK,IAAIA,KAAK,CAACV,IAAxB;AAFJ,GAAP;AAIH,CAVD;;AAYA,eAAeL,KAAf","sourcesContent":["import Layout from '../components/MyLayout';\r\nimport Link from 'next/link';\r\nimport fetch from 'isomorphic-unfetch';\r\n\r\nconst Index = props => (\r\n    <Layout>\r\n        <h1>Batman TV Shows! Count: {props.count}</h1>\r\n        <ul>\r\n            {props.shows.map(show => (\r\n                <li key={show.id}>\r\n                    <Link href=\"/p/[id]\" as={`/p/${show.id}`}>\r\n                        <a id=\"ultest\">{show.name}<span>HIIII</span></a>\r\n                    </Link>\r\n                </li>\r\n            ))}\r\n        </ul>\r\n        <style jsx>{`\r\n            #ultest span{\r\n                color: yellow;\r\n            }\r\n            h1,\r\n            a {\r\n            font-family: 'Arial';\r\n            }\r\n\r\n            ul {\r\n            padding: 0;\r\n            }\r\n\r\n            li {\r\n            list-style: none;\r\n            margin: 5px 0;\r\n            }\r\n\r\n            a {\r\n            text-decoration: none;\r\n            color: blue;\r\n            }\r\n\r\n            a:hover {\r\n            opacity: 0.6;\r\n            }\r\n        `}</style>\r\n    </Layout>\r\n);\r\n\r\nIndex.getInitialProps = async function() {\r\n    const res = await fetch('https://api.tvmaze.com/search/shows?q=batman');\r\n    const data = await res.json();\r\n\r\n    console.log(`Show data fetched. Count: ${data.length}`);\r\n\r\n    return {\r\n        count: data.length,\r\n        shows: data.map(entry => entry.show)\r\n    };\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}